{"version":3,"file":"static/js/517.1f2075b1.chunk.js","mappings":"yMAAaA,EAAiB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,QAAAC,EAAAA,EAAAA,GAAAR,EAAA,GAAAS,E,QAAAA,GAASC,QAYvC,SAASC,EAAgBC,GACrB,IAAIC,EAASD,EAAIE,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAClD,OAAQD,EAAOE,OAAS,GACpB,KAAK,EACD,MACJ,KAAK,EACDF,GAAU,KACV,MACJ,KAAK,EACDA,GAAU,IACV,MACJ,QACI,MAAM,IAAIH,MAAM,8CAExB,IACI,OAxBR,SAA0BE,GACtB,OAAOI,mBAAmBC,KAAKL,GAAKE,QAAQ,QAAQ,SAACI,EAAGC,GACpD,IAAIC,EAAOD,EAAEE,WAAW,GAAGC,SAAS,IAAIC,cAIxC,OAHIH,EAAKL,OAAS,IACdK,EAAO,IAAMA,GAEV,IAAMA,CACjB,IACJ,CAgBeI,CAAiBX,EAC5B,CACA,MAAOY,GACH,OAAOR,KAAKJ,EAChB,CACJ,CA9BAb,EAAkB0B,UAAUC,KAAO,oB,uBCEpB,SAASC,IACrB,IACGC,ED2BC,SAAmBC,EAAOC,GAC7B,GAAqB,kBAAVD,EACP,MAAM,IAAI9B,EAAkB,6CAEhC+B,IAAYA,EAAU,CAAC,GACvB,IAKIC,EALEC,GAAyB,IAAnBF,EAAQG,OAAkB,EAAI,EACpCC,EAAOL,EAAMM,MAAM,KAAKH,GAC9B,GAAoB,kBAATE,EACP,MAAM,IAAInC,EAAkB,0CAADqC,OAA2CJ,EAAM,IAGhF,IACID,EAAUrB,EAAgBwB,EAC9B,CACA,MAAOG,GACH,MAAM,IAAItC,EAAkB,qDAADqC,OAAsDJ,EAAM,EAAC,MAAAI,OAAKC,EAAEC,QAAO,KAC1G,CACA,IACI,OAAOC,KAAKC,MAAMT,EACtB,CACA,MAAOM,GACH,MAAM,IAAItC,EAAkB,mDAADqC,OAAoDJ,EAAM,EAAC,MAAAI,OAAKC,EAAEC,QAAO,KACxG,CACJ,CClDqBG,CADDC,aAAaC,QAAQ,cAGvC,OAAOC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACLF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CAAAD,SAAA,EACLE,EAAAA,EAAAA,KAAA,QAAMC,QAAQ,WACdD,EAAAA,EAAAA,KAAA,SAAAF,SAAO,mBAETE,EAAAA,EAAAA,KAAA,MAAIE,UAAU,6BAA4BJ,SAAC,aAC3CF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,qCAAoCJ,SAAA,EACjDF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAK,WAAOE,EAAAA,EAAAA,KAAA,QAAME,UAAU,YAAWJ,SAAElB,EAAaF,OAAY,QAClEkB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,YAAQE,EAAAA,EAAAA,KAAA,QAAME,UAAU,YAAWJ,SAAEJ,aAAaC,QAAQ,eAAoB,YAIxF,C","sources":["../node_modules/jwt-decode/build/esm/index.js","Components/Profile/Profile.jsx"],"sourcesContent":["export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","\nimport { jwtDecode } from 'jwt-decode';\nimport { Helmet } from 'react-helmet';\n\nexport default function Profile() {\n   let encodedToken=localStorage.getItem('userToken')\n  let decodedToken = jwtDecode(encodedToken)\n\n  return <>\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>My Profile</title>\n    </Helmet>\n    <h1 className='text-center text-main mt-5'>My Info</h1>\n    <div className='bg-light text-center p-5 my-5 brdr'>\n      <h2 >Name : <span className='text-main'>{decodedToken.name}</span> </h2>\n      <h3>Email : <span className='text-main'>{localStorage.getItem('userEmail')}</span> </h3>\n    </div>\n\n  </>\n}"],"names":["InvalidTokenError","_Error","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","_wrapNativeSuper","Error","base64UrlDecode","str","output","replace","length","decodeURIComponent","atob","m","p","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","prototype","name","Profile","decodedToken","token","options","decoded","pos","header","part","split","concat","e","message","JSON","parse","jwtDecode","localStorage","getItem","_jsxs","_Fragment","children","Helmet","_jsx","charSet","className"],"sourceRoot":""}